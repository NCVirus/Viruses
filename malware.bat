#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}
#include <SFML/Graphics.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>

int main()
{
    sf::RenderWindow window(sf::VideoMode(800, 600), "Melting Screen Effect");
    sf::Image image;
    if (!image.loadFromFile("your_image.png")) {
        return -1; // Make sure you have an image named "your_image.png"
    }

    sf::Texture texture;
    texture.loadFromImage(image);

    sf::Sprite sprite(texture);

    // We'll manipulate a pixel buffer to create the melting effect
    sf::Image buffer = image;

    // Store vertical offsets per column
    std::vector<int> offsets(image.getSize().x, 0);

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if(event.type == sf::Event::Closed)
                window.close();
        }

        // For each column, randomly increase offset to simulate melting
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            if (std::rand() % 10 == 0) {
                offsets[x] += 1;
                if (offsets[x] > 30) offsets[x] = 0;  // Reset after some max melting
            }
        }

        // Create a new melted image by shifting pixels down by offset in each column
        for (unsigned int x = 0; x < image.getSize().x; ++x) {
            int offset = offsets[x];
            for (unsigned int y = 0; y < image.getSize().y; ++y) {
                // Compute source y, clamp at 0
                int srcY = y - offset;
                if (srcY < 0) srcY = 0;
                buffer.setPixel(x, y, image.getPixel(x, srcY));
            }
        }

        texture.update(buffer);

        window.clear();
        window.draw(sprite);
        window.display();
    }

    return 0;
}

